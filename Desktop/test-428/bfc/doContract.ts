import { requestSuiFromFaucetV0, getFaucetHost } from '@benfen/bfc.js/faucet';
import { SuiClient, getFullnodeUrl } from '@benfen/bfc.js/client';
import { Ed25519Keypair } from '@benfen/bfc.js/keypairs/ed25519';
import { TransactionBlock } from '@benfen/bfc.js/transactions';

async function main() {

const { execSync } = require('child_process');
// Generate a new Ed25519 Keypair
const keypair = new Ed25519Keypair();

// Get faucet
const address = await keypair.getPublicKey().toSuiAddress()
	await requestSuiFromFaucetV0({
		host: getFaucetHost('testnet'),
		recipient: address,
	});
console.log(`The address is :`, address);

// Set Client
const client = new SuiClient({
	url: 'https://obcrpc.openblock.vip/',
});

// Set Package
const packageObjectId = 'BFC54cdca07d48592f867911eb8c67c159af170c3cb8ebddacb4dc5ab3a31c1bf6f40a1';
const tx = new TransactionBlock();

console.log(`Ready to compose tx`);

tx.moveCall({
	target: `${packageObjectId}::my_module::verify_VC`,
	arguments: [
		tx.pure(1),
		tx.pure([0x65, 0x74, 0x68]),
		tx.pure([0x30, 0x78, 0x30, 0x35, 0x34, 0x37, 0x36, 0x45, 0x45, 0x39, 0x32, 0x33, 0x35, 0x33, 0x33, 0x35, 0x41, 0x44, 0x64, 0x32, 0x65, 0x35, 0x30, 0x63, 0x30, 0x39, 0x42, 0x32, 0x44, 0x31, 0x36, 0x61, 0x33, 0x41, 0x32, 0x63, 0x43, 0x34, 0x65, 0x62, 0x45, 0x43]),
		tx.pure([0x11, 0xf8, 0xb7, 0x7F, 0x34, 0xFC, 0xF1, 0x4B, 0x70, 0x95, 0xBF, 0x52, 0x28, 0xAc, 0x06, 0x06, 0x32, 0x4E, 0x82, 0xD1]),
		tx.pure([0x01, 0x8b, 0x6a, 0xe3, 0x73, 0xdc]),
		tx.pure([0x00]),
		tx.pure([0xd3, 0x15, 0x23, 0xb3, 0xce, 0x50, 0x6c, 0xce, 0xff, 0xa8, 0xe9, 0x87, 0xe4, 0xc7, 0xa2, 0x12, 0x99, 0xe9, 0x3c, 0x4f, 0x28, 0x61, 0x4d, 0x5d, 0xa7, 0xd1, 0x02, 0x6e, 0x6c, 0xf3, 0x49, 0x0b]),
		tx.pure([0x54, 0x47, 0xc6, 0xe5, 0x47, 0x37, 0x92, 0x20, 0xea, 0x89, 0x4e, 0xaa, 0xec, 0x61, 0xc6, 0xb8, 0xe1, 0x10, 0x0b, 0x61, 0x06, 0x80, 0xeb, 0x66, 0x96, 0x67, 0x6d, 0x28, 0xe1, 0x39, 0xff, 0xea, 0x7a, 0x6c, 0xc3, 0xcb, 0x26, 0x63, 0xc0, 0x9d, 0xcd, 0xd1, 0x7e, 0xc9, 0x0b, 0xca, 0x94, 0x83, 0x50, 0xf4, 0x38, 0x52, 0xeb, 0xbd, 0xc5, 0x5c, 0x63, 0xd6, 0xa7, 0x67, 0x0d, 0xf0, 0xdb, 0x93, 0x01]),
		tx.pure([0x9e, 0xf8, 0x8b, 0x87, 0x49, 0xb7, 0xe5, 0xa0, 0xe2, 0xde, 0xa5, 0xdd, 0x10, 0xc9, 0x93, 0x95, 0x65, 0xd2, 0xd2, 0x15])],
});

console.log(`Already to compose tx`);

const result = await client.signAndExecuteTransactionBlock({
	signer: keypair,
	transactionBlock: tx,
});
console.log({ result });
}

main();


// get coins owned by an address
